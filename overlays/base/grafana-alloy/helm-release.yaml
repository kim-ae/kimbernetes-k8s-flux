apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana-alloy
spec:
  timeout: 15m
  chart:
    spec:
      chart: k8s-monitoring
      sourceRef:
        kind: HelmRepository
        name: grafana-alloy
      version: 3.2.2
  interval: 24h
  releaseName: grafana-monitoring
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  values:
  # https://github.com/grafana/k8s-monitoring-helm/blob/main/charts/k8s-monitoring/values.yaml
    cluster:
      name:  kim7s
    clusterEvents:
      enabled: true
      labelsToKeep: ["level","namespace","node","source"]
    clusterMetrics:
      enabled: true
      kubelet:
        enabled: true
      node-exporter:
        enabled: true
      controlPlane:
        enabled: true
      kepler:
        enabled: true
    alloy-logs:
      enabled: true
      enableReporting: false
      alloy:
        extraEnv:
          - name: GCLOUD_RW_API_KEY
            valueFrom:
              secretKeyRef:
                name: access-policy-password
                key: password
          - name: CLUSTER_NAME
            value: kim7s
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: GCLOUD_FM_COLLECTOR_ID
            value: grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-$(POD_NAME)-$(NODE_NAME)
      remoteConfig:
        enabled: true
        url: https://fleet-management-prod-015.grafana.net
        auth:
          type: basic
          username: "1348421"
          passwordFrom: remote.kubernetes.secret.password.data["password"]
        secret:
          embed: true
      extraConfig: |
        remote.kubernetes.secret "password" {
          namespace = "observability"
          name = "access-policy-password"
        }
    alloy-singleton:
      enabled: true
      enableReporting: false
      alloy:
        extraEnv:
          - name: GCLOUD_RW_API_KEY
            valueFrom:
              secretKeyRef:
                name: access-policy-password
                key: password
          - name: CLUSTER_NAME
            value: kim7s
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: GCLOUD_FM_COLLECTOR_ID
            value: grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-$(POD_NAME)
      extraConfig: |
        remote.kubernetes.secret "password" {
          namespace = "observability"
          name = "access-policy-password"
        }
      remoteConfig:
        enabled: true
        url: https://fleet-management-prod-015.grafana.net
        auth:
          type: basic
          username: "1348421"
          passwordFrom: remote.kubernetes.secret.password.data["password"]
        secret:
          embed: true
    alloy-metrics:
      enabled: true
      enableReporting: false
      alloy:
        extraEnv:
          - name: GCLOUD_RW_API_KEY
            valueFrom:
              secretKeyRef:
                name: access-policy-password
                key: password
          - name: CLUSTER_NAME
            value: kim7s
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: GCLOUD_FM_COLLECTOR_ID
            value: grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-$(POD_NAME)
      extraConfig: |
        remote.kubernetes.secret "password" {
          namespace = "observability"
          name = "access-policy-password"
        }
      remoteConfig:
        enabled: true
        url: https://fleet-management-prod-015.grafana.net
        auth:
          type: basic
          username: "1348421"
          passwordFrom: remote.kubernetes.secret.password.data["password"]
        secret:
          embed: true
    nodeLogs:
      enabled: true
      labelsToKeep: ["instance","level","name","unit","service_name","source"]
      journal:
        units:
          - kubelet.service
          - containerd.service
    destinations:
      - name: loki-grafana-cloud
        type: loki
        url: https://logs-prod-024.grafana.net/loki/api/v1/push
        auth:
          type: basic
          usernameFrom: convert.nonsensitive(remote.kubernetes.secret.password.data["username"])
          passwordFrom: remote.kubernetes.secret.password.data["password"]
      - name: prometheus-grafana-cloud
        type: prometheus
        url: https://prometheus-prod-40-prod-sa-east-1.grafana.net/api/prom/push
        auth:
          type: basic
          usernameFrom: "2621077"
          passwordFrom: remote.kubernetes.secret.password.data["password"]
        secret:
          embed: true
    podLogs:
      enabled: true
      staticLabels:
        source: "pods"
      extraDiscoveryRules: |-
          rule {
            target_label = "log_source"
            replacement = "kim7s"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_controller_name"]
            regex         = "([0-9a-z-.]+?)(-[0-9a-f]{8,10})?"
            target_label  = "__tmp_controller_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__tmp_controller_name", "__meta_kubernetes_pod_name"]
            regex         = "^;*([^;]+)(;.*)?$"
            target_label  = "app"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance", "__meta_kubernetes_pod_label_instance"]
            regex         = "^;*([^;]+)(;.*)?$"
            target_label  = "instance"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_node_name"]
            target_label  = "node_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_container_image"]
            target_label  = "image"
          }
      labelsToKeep:
      - app
      - cluster
      - container
      - flags
      - image
      - log_source
      - namespace
      - node_name
      - pod
      - stream
      - instance
      - source
    selfReporting:
      enabled: true             